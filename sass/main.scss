//Smashing Magazine
//@media screen and (min-width:31.25em)
//@media screen and (min-width:38.125em)
//@media screen and (min-width:40.625em)
//@media screen and (min-width:50em)
//@media screen and (min-width:50em) and (max-width:63.75em)
//@media screen and (min-width:63.75em)
//@media screen and (min-width:63.75em) and (max-width:71.875em)
//@media screen and (min-width:63.75em) and (max-width:76.24em)
//@media screen and (min-width:76.25em)
//@media screen and (min-width:81.25em)
//@media screen and (min-width:90.625em)
//@media screen and (min-width:100em)
//@media screen and (min-width:0) and (max-width:63.74em)
//@media screen and (min-width:63.75em) and (max-width:70.3125em)


/*
#{theme_name()}
#{theme_description()}
*/

$version: #{theme_version()};
/*
#{$version}
 */
@import "compass";
@import "breakpoint";
@import "normalize";
@import "SassyJSON";



$map: ((a: (1 2 ( b : 1 )), b: ( #444444, false, ( a: 1, b: test ) ), c: (2 3 4 string)));

@include json-encode($map, comment);


$breakpoint-to-ems: true;

$small: 480px;
$medium: 767px;
$large: 979px;
//$wide: 1200px;

$breakSmall: max-width $small;
$breakMedium: $small+1px $medium;
$breakLarge: $medium+1px $large;
$breakWide: min-width $large+1px;

$bg_color: white;

body {
  text-rendering: optimizeLegibility;

  line-height: 1.5;
  margin: 0;
  padding: 0;

  background: $bg_color;

  @if compass-env() == 'development' {
    &:before, &:after {
      z-index: 999;
      color: invert($bg_color);
      position:fixed;
      display: none;
      display: block;
    }

    &:before {
      left: 0;
      top: 0;

      //@include responsive(hd) { content: 'hd'; }
      //@include breakpoint($breakRetina) { content: 'retina'; }
    }
    &:after {
      right: 0;
      bottom: 0;

      @include breakpoint($breakSmall) { content: 'handheld'; }
      @include breakpoint($breakMedium) { content: 'tablet'; }
      @include breakpoint($breakLarge) { content: 'desktop'; }
      @include breakpoint($breakWide) { content: 'widescreen'; }
    }
  }

}


.main {
  width: 500px;
  height: 500px;

  border: {
    left: 5px solid black;
    right: 1px solid red;
    bottom: 1px solid green;
    top: 5px solid blue;
  }
}





#{headers()} {
  font-weight: bold;
}

$i:6;
@while $i > 0 {
  h#{$i} {
    font-size: (8*8)-(8*$i);
  }
  .h#{$i} {
    @extend h#{$i};
  }
  $i: $i - 1;
}




@mixin padding-reset-left() {
  padding-left: 0;
}
@mixin padding-reset-right() {
  padding-right: 0;
}
@mixin padding-reset-top() {
  padding-top: 0;
}
@mixin padding-reset-bottom() {
  padding-bottom: 0;
}
@mixin padding-reset() {
  @include padding-reset-top;
  @include padding-reset-right;
  @include padding-reset-bottom;
  @include padding-reset-left;
}

$props: top right bottom left;
@each $prop in $props {
  %padding-reset-#{$prop} {
    padding-#{$prop}: 0;
  }
}
%padding-reset {
  padding: 0;
}

@mixin margin-reset-left() {
  margin-left: 0;
}
@mixin margin-reset-right() {
  margin-right: 0;
}
@mixin margin-reset-top() {
  margin-top: 0;
}
@mixin margin-reset-bottom() {
  margin-bottom: 0;
}
@mixin margin-reset() {
  @include margin-reset-top;
  @include margin-reset-right;
  @include margin-reset-bottom;
  @include margin-reset-left;
}

$props: top right bottom left;
@each $prop in $props {
  %margin-reset-#{$prop} {
    margin-#{$prop}: 0;
  }
}
%margin-reset {
  margin: 0;
}

.main {
  @include padding-reset;
  @include margin-reset;
}

.sidebar {
  @extend %margin-reset-left;
  @extend %padding-reset;
}







@mixin font-weight($style: normal) {
  $style: to_lower_case($style);
  $weights: (
    thin: 100,
    ultralight: 100,
    ultra-light: 100,
    extralight: 200,
    extra-light: 200,
    light: 300,
    normal: 400,
    book: 400,
    medium: 500,
    demi: 600,
    semibold: 600,
    semi-bold: 600,
    bold: 700,
    extrabold: 800,
    extra-bold: 800,
    black: 900,
    heavy: 900,
    ultrabold: 900,
    ultra-bold: 900
  );
  font-weight: if(map-has-key($weights, $style), map-get($weights, $style), map-get($weights, normal));
}

h1 {
  @include font-weight();
}



@mixin zstack($items:(), $multiplier: 10) {
  $i: 1;
  @each $item in $items {
    #{$item} {
      z-index: $i*$multiplier;
    }
    $i: $i+1;
  }
}

//@include zstack(body h1 h2 h3);

//body, h1, h3, h2
h2 {
  //z-index: above(h2, h3);
}
h3 {
  //z-index: above(h3, h1);
}
h1 {
  //z-index: above(h1);
}

//Smashing Magazine
//@media screen and (min-width:31.25em)
//@media screen and (min-width:38.125em)
//@media screen and (min-width:40.625em)
//@media screen and (min-width:50em)
//@media screen and (min-width:50em) and (max-width:63.75em)
//@media screen and (min-width:63.75em)
//@media screen and (min-width:63.75em) and (max-width:71.875em)
//@media screen and (min-width:63.75em) and (max-width:76.24em)
//@media screen and (min-width:76.25em)
//@media screen and (min-width:81.25em)
//@media screen and (min-width:90.625em)
//@media screen and (min-width:100em)
//@media screen and (min-width:0) and (max-width:63.74em)
//@media screen and (min-width:63.75em) and (max-width:70.3125em)


/*
#{theme_name()}
#{theme_description()}
*/

$version: #{theme_version()};
/*
#{$version}
 */
@import "compass";
@import "breakpoint";
@import "normalize";
@import "SassyJSON";



$map: ((a: (1 2 ( b : 1 )), b: ( #444444, false, ( a: 1, b: test ) ), c: (2 3 4 string)));

@include json-encode($map, comment);


$breakpoint-to-ems: true;

$small: 480px;
$medium: 767px;
$large: 979px;
//$wide: 1200px;

$breakSmall: max-width $small;
$breakMedium: $small+1px $medium;
$breakLarge: $medium+1px $large;
$breakWide: min-width $large+1px;

$bg_color: white;

body {
  text-rendering: optimizeLegibility;

  line-height: 1.5;
  margin: 0;
  padding: 0;

  background: $bg_color;

  @if compass-env() == 'development' {
    &:before, &:after {
      z-index: 999;
      color: invert($bg_color);
      position:fixed;
      display: none;
      display: block;
    }

    &:before {
      left: 0;
      top: 0;

      //@include responsive(hd) { content: 'hd'; }
      //@include breakpoint($breakRetina) { content: 'retina'; }
    }
    &:after {
      right: 0;
      bottom: 0;

      @include breakpoint($breakSmall) { content: 'handheld'; }
      @include breakpoint($breakMedium) { content: 'tablet'; }
      @include breakpoint($breakLarge) { content: 'desktop'; }
      @include breakpoint($breakWide) { content: 'widescreen'; }
    }
  }

}


.main {
  width: 500px;
  height: 500px;

  border: {
    left: 5px solid black;
    right: 1px solid red;
    bottom: 1px solid green;
    top: 5px solid blue;
  }
}





#{headers()} {
  font-weight: bold;
}

$i:6;
@while $i > 0 {
  h#{$i} {
    font-size: (8*8)-(8*$i);
  }
  .h#{$i} {
    @extend h#{$i};
  }
  $i: $i - 1;
}








@function insert-nth($list, $index, $value) {
  $length: length($list);

  @if type-of($index) != number {
    @warn "List index #{$index} is not a number for `insert-nth`.";
    @return false;
  }

  @if $index < 1 {
    @warn "List index #{$index} must be a non-zero integer for `insert-nth`";
    @return false;
  }

  @if $index > $length {
    @return append($list, $value, list-separator($list));
  }

  $result: ();

  @for $i from 1 through $length {
    @if $i == $index {
      @if is-true($value) {
        $result: append($result, $value, list-separator($list));
      }
    }

    $result: append($result, nth($list, $i), list-separator($list));
  }

  @return $result;
}
//not sure if maps are the right tool here -- im leaning on lists still
//http://sass-lang.com/documentation/Sass/Script/Functions.html#list-functions
//http://sass-lang.com/documentation/file.SASS_REFERENCE.html#lists
//http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/
//https://github.com/Team-Sass/SassyLists/blob/master/dist/_SassyLists.scss
$_above: () !global;
@function above($selector, $above-item: body, $multiplier: 10) {
  $above: $_above;
  $dont: false;
  @if index($above, $selector) {
    @debug "ITEM:#{$selector} INDEX:" + index($above, $selector);
    $above: join($above-item, $above);
    $dont: true;
  }
  @if index($above, $above-item) == false {
    $above: append($above, $above-item);
  }
  @if $dont == false {
    $above: insert-nth($above, index($above, $above-item)+1, $selector);
  }
  @debug index($above, $above-item) * $multiplier;

  $_above: $above !global;
  @return index($above, $above-item) * $multiplier;
}

//body, h1, h3, h2
h2 {
  z-index: above(h2, h3);
}
h3 {
  z-index: above(h3, h1);
}
h1 {
  z-index: above(h1);
}
